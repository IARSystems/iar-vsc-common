//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');

var shared_ttypes = require('./shared_types');


var HeartbeatService = require('./HeartbeatService');
var HeartbeatServiceClient = HeartbeatService.Client;
var HeartbeatServiceProcessor = HeartbeatService.Processor;
var ttypes = require('./logservice_types');
//HELPER FUNCTIONS AND STRUCTURES

var LogService_addCategory_args = function(args) {
  this.category = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
  }
};
LogService_addCategory_args.prototype = {};
LogService_addCategory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_addCategory_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_addCategory_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 1);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_addCategory_result = function(args) {
};
LogService_addCategory_result.prototype = {};
LogService_addCategory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_addCategory_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_addCategory_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_removeCategory_args = function(args) {
  this.category = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
  }
};
LogService_removeCategory_args.prototype = {};
LogService_removeCategory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_removeCategory_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_removeCategory_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 1);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_removeCategory_result = function(args) {
};
LogService_removeCategory_result.prototype = {};
LogService_removeCategory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_removeCategory_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_removeCategory_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_startSession_args = function(args) {
  this.category = null;
  if (args) {
    if (args.category !== undefined && args.category !== null) {
      this.category = args.category;
    }
  }
};
LogService_startSession_args.prototype = {};
LogService_startSession_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.category = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_startSession_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_startSession_args');
  if (this.category !== null && this.category !== undefined) {
    output.writeFieldBegin('category', Thrift.Type.STRING, 1);
    output.writeString(this.category);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_startSession_result = function(args) {
};
LogService_startSession_result.prototype = {};
LogService_startSession_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_startSession_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_startSession_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_postLogEntry_args = function(args) {
  this.entry = null;
  if (args) {
    if (args.entry !== undefined && args.entry !== null) {
      this.entry = new ttypes.LogEntry(args.entry);
    }
  }
};
LogService_postLogEntry_args.prototype = {};
LogService_postLogEntry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.entry = new ttypes.LogEntry();
        this.entry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_postLogEntry_args.prototype.write = function(output) {
  output.writeStructBegin('LogService_postLogEntry_args');
  if (this.entry !== null && this.entry !== undefined) {
    output.writeFieldBegin('entry', Thrift.Type.STRUCT, 1);
    this.entry.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogService_postLogEntry_result = function(args) {
};
LogService_postLogEntry_result.prototype = {};
LogService_postLogEntry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LogService_postLogEntry_result.prototype.write = function(output) {
  output.writeStructBegin('LogService_postLogEntry_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LogServiceClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
Thrift.inherits(LogServiceClient, HeartbeatServiceClient);
LogServiceClient.prototype.seqid = function() { return this._seqid; };
LogServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };

LogServiceClient.prototype.addCategory = function(category, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addCategory(category);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addCategory(category);
  }
};

LogServiceClient.prototype.send_addCategory = function(category) {
  var output = new this.pClass(this.output);
  var params = {
    category: category
  };
  var args = new LogService_addCategory_args(params);
  try {
    output.writeMessageBegin('addCategory', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LogServiceClient.prototype.recv_addCategory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LogService_addCategory_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

LogServiceClient.prototype.removeCategory = function(category, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeCategory(category);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeCategory(category);
  }
};

LogServiceClient.prototype.send_removeCategory = function(category) {
  var output = new this.pClass(this.output);
  var params = {
    category: category
  };
  var args = new LogService_removeCategory_args(params);
  try {
    output.writeMessageBegin('removeCategory', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LogServiceClient.prototype.recv_removeCategory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LogService_removeCategory_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

LogServiceClient.prototype.startSession = function(category, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startSession(category);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startSession(category);
  }
};

LogServiceClient.prototype.send_startSession = function(category) {
  var output = new this.pClass(this.output);
  var params = {
    category: category
  };
  var args = new LogService_startSession_args(params);
  try {
    output.writeMessageBegin('startSession', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LogServiceClient.prototype.recv_startSession = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LogService_startSession_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};

LogServiceClient.prototype.postLogEntry = function(entry, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_postLogEntry(entry);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_postLogEntry(entry);
  }
};

LogServiceClient.prototype.send_postLogEntry = function(entry) {
  var output = new this.pClass(this.output);
  var params = {
    entry: entry
  };
  var args = new LogService_postLogEntry_args(params);
  try {
    output.writeMessageBegin('postLogEntry', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

LogServiceClient.prototype.recv_postLogEntry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new LogService_postLogEntry_result();
  result.read(input);
  input.readMessageEnd();

  callback(null);
};
var LogServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
Thrift.inherits(LogServiceProcessor, HeartbeatServiceProcessor);
LogServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
LogServiceProcessor.prototype.process_addCategory = function(seqid, input, output) {
  var args = new LogService_addCategory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addCategory.length === 1) {
    Q.fcall(this._handler.addCategory.bind(this._handler),
      args.category
    ).then(function(result) {
      var result_obj = new LogService_addCategory_result({success: result});
      output.writeMessageBegin("addCategory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("addCategory", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.addCategory(args.category, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LogService_addCategory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addCategory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addCategory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LogServiceProcessor.prototype.process_removeCategory = function(seqid, input, output) {
  var args = new LogService_removeCategory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeCategory.length === 1) {
    Q.fcall(this._handler.removeCategory.bind(this._handler),
      args.category
    ).then(function(result) {
      var result_obj = new LogService_removeCategory_result({success: result});
      output.writeMessageBegin("removeCategory", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("removeCategory", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.removeCategory(args.category, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LogService_removeCategory_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeCategory", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeCategory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LogServiceProcessor.prototype.process_startSession = function(seqid, input, output) {
  var args = new LogService_startSession_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startSession.length === 1) {
    Q.fcall(this._handler.startSession.bind(this._handler),
      args.category
    ).then(function(result) {
      var result_obj = new LogService_startSession_result({success: result});
      output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("startSession", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.startSession(args.category, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LogService_startSession_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("startSession", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startSession", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
LogServiceProcessor.prototype.process_postLogEntry = function(seqid, input, output) {
  var args = new LogService_postLogEntry_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.postLogEntry.length === 1) {
    Q.fcall(this._handler.postLogEntry.bind(this._handler),
      args.entry
    ).then(function(result) {
      var result_obj = new LogService_postLogEntry_result({success: result});
      output.writeMessageBegin("postLogEntry", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("postLogEntry", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.postLogEntry(args.entry, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new LogService_postLogEntry_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("postLogEntry", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("postLogEntry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
