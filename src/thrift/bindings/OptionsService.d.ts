//
// Autogenerated by Thrift Compiler (0.14.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');
import shared_ttypes = require('./shared_types');


import ttypes = require('./OptionsService_types');
import SERVICE_ID = ttypes.SERVICE_ID
import CreateSessionResponse = ttypes.CreateSessionResponse
import DestroySessionRequest = ttypes.DestroySessionRequest
import DestroySessionResponse = ttypes.DestroySessionResponse
import Tree = ttypes.Tree
import GetTreeRequest = ttypes.GetTreeRequest
import GetTreeResponse = ttypes.GetTreeResponse

declare class Client {
  #output: thrift.TTransport;
  #pClass: thrift.TProtocol;
  #_seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  CreateSession(): Q.Promise<CreateSessionResponse>;

  CreateSession(callback?: (error: void, response: CreateSessionResponse)=>void): void;

  DestroySession(destroySessionRequest: DestroySessionRequest): Q.Promise<DestroySessionResponse>;

  DestroySession(destroySessionRequest: DestroySessionRequest, callback?: (error: void, response: DestroySessionResponse)=>void): void;

  GetTree(getTreeRequest: GetTreeRequest): Q.Promise<GetTreeResponse>;

  GetTree(getTreeRequest: GetTreeRequest, callback?: (error: void, response: GetTreeResponse)=>void): void;
}

declare class Processor {
  #_handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_CreateSession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_DestroySession(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_GetTree(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
